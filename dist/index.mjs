import { SvelteComponent, init, safe_not_equal, create_slot, update_slot, transition_in, transition_out, compute_rest_props, assign, exclude_internal_props } from 'svelte/internal';
import { setContext, onMount, onDestroy, getContext } from 'svelte';
import { formSubscriptionItems, createForm, fieldSubscriptionItems } from 'final-form';

function whenValueChanges(init, callback, isEqual = (a, b) => a === b) {
  let prev = init;
  return (value) => {
    if (!isEqual(prev, value)) {
      callback();
      prev = value;
    }
  };
}

const shallowEqual = (a, b) => {
  if (a === b) {
    return true;
  }
  if (typeof a !== "object" || !a || typeof b !== "object" || !b) {
    return false;
  }
  var keysA = Object.keys(a);
  var keysB = Object.keys(b);
  if (keysA.length !== keysB.length) {
    return false;
  }
  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b);
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];
    if (!bHasOwnProperty(key) || a[key] !== b[key]) {
      return false;
    }
  }
  return true;
};

/* src/Form.svelte generated by Svelte v3.29.0 */
const get_default_slot_changes = dirty => ({ state: dirty & /*state*/ 1 });

const get_default_slot_context = ctx => ({
	form: /*form*/ ctx[1],
	state: /*state*/ ctx[0]
});

function create_fragment(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], get_default_slot_context);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, state*/ 33) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

const FORM = {};

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["subscription","initialValues","initialValuesEqual"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { subscription = getFormSubscriptionItems() } = $$props;
	let { initialValues } = $$props;
	let { initialValuesEqual } = $$props;
	let state = {};
	let unsubscribe;
	const form = createForm({ initialValues, ...$$restProps });
	setContext(FORM, form);

	onMount(() => {
		unsubscribe = form.subscribe(
			newState => {
				$$invalidate(0, state = newState);
			},
			subscription
		);
	});

	onDestroy(() => {
		unsubscribe && unsubscribe();
	});

	function getFormSubscriptionItems() {
		return formSubscriptionItems.reduce(
			(result, key) => {
				result[key] = true;
				return result;
			},
			{}
		);
	}

	const whenInitialValuesChanges = whenValueChanges(initialValues, () => form.setConfig("initialValues", initialValues), initialValuesEqual || shallowEqual);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("subscription" in $$new_props) $$invalidate(2, subscription = $$new_props.subscription);
		if ("initialValues" in $$new_props) $$invalidate(3, initialValues = $$new_props.initialValues);
		if ("initialValuesEqual" in $$new_props) $$invalidate(4, initialValuesEqual = $$new_props.initialValuesEqual);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*initialValues*/ 8) {
			 whenInitialValuesChanges(initialValues);
		}
	};

	return [state, form, subscription, initialValues, initialValuesEqual, $$scope, slots];
}

class Form extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			subscription: 2,
			initialValues: 3,
			initialValuesEqual: 4
		});
	}
}

/* src/Field.svelte generated by Svelte v3.29.0 */

const get_default_slot_changes$1 = dirty => ({
	meta: dirty & /*meta*/ 1,
	input: dirty & /*input*/ 2
});

const get_default_slot_context$1 = ctx => ({
	meta: /*meta*/ ctx[0],
	input: /*input*/ ctx[1]
});

function create_fragment$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], get_default_slot_context$1);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, meta, input*/ 67) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, get_default_slot_changes$1, get_default_slot_context$1);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	const defaultParse = value => value === "" ? undefined : value;

	let { name } = $$props,
		{ subscription = getFieldSubscriptionItems() } = $$props,
		{ validate = undefined } = $$props,
		{ parse = defaultParse } = $$props;

	let meta = {};
	let input = {};
	let unsubscribe;
	const form = getContext(FORM);

	if (!form) {
		throw new Error("Could not find svelte-final-form context value. Please ensure that your Field is inside the Form component.");
	}

	onMount(() => {
		unsubscribe = form.registerField(
			name,
			fieldState => {
				const { blur, change, focus, value, ...fieldMeta } = fieldState;
				$$invalidate(0, meta = fieldMeta);

				$$invalidate(1, input = {
					name,
					onBlur: blur,
					onChange: val => {
						change(parse(val, name));
					},
					onFocus: focus,
					value: value === undefined ? "" : value
				});
			},
			subscription,
			{ getValidator: () => validate }
		);
	});

	onDestroy(() => {
		unsubscribe && unsubscribe();
	});

	function getFieldSubscriptionItems() {
		return fieldSubscriptionItems.reduce(
			(result, key) => {
				result[key] = true;
				return result;
			},
			{}
		);
	}

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(2, name = $$props.name);
		if ("subscription" in $$props) $$invalidate(3, subscription = $$props.subscription);
		if ("validate" in $$props) $$invalidate(4, validate = $$props.validate);
		if ("parse" in $$props) $$invalidate(5, parse = $$props.parse);
		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	return [meta, input, name, subscription, validate, parse, $$scope, slots];
}

class Field extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			name: 2,
			subscription: 3,
			validate: 4,
			parse: 5
		});
	}
}

export { Field, Form };
